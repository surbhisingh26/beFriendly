{{>head}}
{{>header}}
{{>side_navbar}}

<div class="page-wrapper">
            <!-- ============================================================== -->
            <!-- Container fluid  -->
            <!-- ============================================================== -->
            <div class="container-fluid">
                <!-- ============================================================== -->
                <!-- Bread crumb and right sidebar toggle -->
                <!-- ============================================================== -->
                <div class="row page-titles">
                    <div class="col-md-5 col-8 align-self-center">
                        <h3 class="text-themecolor m-b-0 m-t-0">Settings</h3>
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="javascript:void(0)">Home</a></li>
                            <li class="breadcrumb-item active">Settings</li>
                        </ol>
                    </div>
                   
                </div>
				
				 <div style='border: 1px solid black;'>
        <div id='progress_bar' style='height:3px; width:0px; background-color:red;'/>
    </div>
    <!-- if you change this id, then also update code of progress bar above -->
        <div id='map_canvas' style='width:100%; height:1000px;'></div>
				</div>
				</div>

{{>right_sidebar}}
{{>foot}}

        <script src='https://maps.googleapis.com/maps/api/js?key=AIzaSyDUhqzrxW91XADieV81_dO8vT46c4G8K5E&libraries=places&v=3.11&sensor=false' type='text/javascript'></script>
        <script type='text/javascript'> 
        // check DOM Ready
		
        $(document).ready(function() {
            // execute
			
            (function maps(data,extraInfo,response) {
			
			
                /////////////// Addresses ///////////////////
                var locations = [{{#friendList}}'S,{{#friend}}{{name}}{{/friend}},{{#friendinfo}}{{address}} {{/friendinfo}}{{#friend}} {{city}} {{country}}{{/friend}}',{{/friendList}}{{#loggedInUser}}'E,Me:{{name}},{{#myInfo}}{{address}}{{/myInfo}} {{city}} {{country}}',{{/loggedInUser}}];
               // var i = 0;
                
				console.log("locations",locations);
                /////// Addresses/////////
                var total_locations = locations.length;
                i = 0;
                console.log('About to look up ' + total_locations + ' locations');
				//alert("{{#loggedInUser}}{{city}}{{/loggedInUser}}");
                // map options
                var options = {
                    zoom: 5,
                    center: new google.maps.LatLng(28.7041, 77.1025),//Bethanie  
                    mapTypeId: google.maps.MapTypeId.HYBRID,//TERRAIN/ ROADMAP/ SATELLITE
                    mapTypeControl: true
                };
                // init map
                console.log('Initialise map...');
                var map = new google.maps.Map(document.getElementById('map_canvas'), options);
               // use the Google API to translate addresses to GPS coordinates 
               //(See Limits: https://developers.google.com/maps/documentation/geocoding/#Limits)
                var geocoder = new google.maps.Geocoder();
                if (geocoder) {
                    console.log('Got a new instance of Google Geocoder object');
                    // Call function 'createNextMarker' every second
                    var myVar = window.setInterval(function(){createNextMarker()}, 700);
                    function createNextMarker() {
                        if (i < locations.length) 
                       {
                            var customer = locations[i];
                            var parts = customer.split(',');
console.log("parts",parts)			;				// split line into parts (fields)
                            var type= parts.splice(0,1);    // type from location line (remove)
							console.log("type",type)			;
                            var name = parts.splice(0,1);    // name from location line(remove)
							console.log("name",name)			;
                            var address =parts.join(',');  
console.log("address",address)			;							// combine remaining parts
                            console.log('Looking up ' + name + ' at address ' + address);
                            geocoder.geocode({ 'address': address }, makeCallback(name, type));
                            i++; // next location in list
                            updateProgressBar(i / total_locations);


                        } else 
                       {
                            console.log('Ready looking up ' + i + ' addresses');
                            window.clearInterval(myVar);
                        }
                    }

                    function makeCallback(name,type) 
                   {
                        var geocodeCallBack = function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                var longitude = results[0].geometry.location.lng();
                                var latitude = results[0].geometry.location.lat();
                                console.log('Received result: lat:' + latitude + ' long:' + longitude);
                                var marker = new google.maps.Marker({
                                    position: new google.maps.LatLng(latitude, longitude),
                                    map: map,
                                    title: name + ' : ' + '\r\n' + results[0].formatted_address});// this is display in tool tip/ icon color
                                   if (type=='E')  {marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')};
                                   if (type=='L')  {marker.setIcon('http://maps.google.com/mapfiles/kml/pal4/icon53.png')};
                                   if (type=='S')  {marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')};
                            }
                           else {
                                console.log('No results found: ' + status);
                            }
                        }
                        return geocodeCallBack;
                    }
                } else 
               {
                    console.log('Failed to instantiate Google Geocoder object');
                }

                function updateProgressBar(percentage_factor) {
                    var map_canvas = document.getElementById('map_canvas');
                    var node = document.getElementById('progress_bar');
                    var w = map_canvas.style.width.match(/\d+/);
                    w = w * percentage_factor;
                    node.style.width = parseInt(w) + 'px';
                    if (percentage_factor == 1) {
                        // jscript style properties are different to the CSS style properties...
                        node.style.backgroundColor = 'green';
                    }
                }

            })();
			
	ajaxRequest('showmap','POST',{}, {dataType:'json', callback:maps});
        });

        </script>
{{>end}}